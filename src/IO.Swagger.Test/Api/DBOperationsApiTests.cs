/* 
 * Switch Database REST API
 *
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DBOperationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DBOperationsApiTests
    {
        private DBOperationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DBOperationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DBOperationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DBOperationsApi
            //Assert.IsInstanceOfType(typeof(DBOperationsApi), instance, "instance is a DBOperationsApi");
        }

        
        /// <summary>
        /// Test AddPost
        /// </summary>
        [Test]
        public void AddPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string aPIKey = null;
            //string accessToken = null;
            //string list = null;
            //string body = null;
            //var response = instance.AddPost(aPIKey, accessToken, list, body);
            //Assert.IsInstanceOf<AddResponse> (response, "response is AddResponse");
        }
        
        /// <summary>
        /// Test ListPost
        /// </summary>
        [Test]
        public void ListPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string aPIKey = null;
            //string accessToken = null;
            //string list = null;
            //Body body = null;
            //instance.ListPost(aPIKey, accessToken, list, body);
            
        }
        
        /// <summary>
        /// Test SetDelete
        /// </summary>
        [Test]
        public void SetDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string aPIKey = null;
            //string accessToken = null;
            //string list = null;
            //string listItemId = null;
            //var response = instance.SetDelete(aPIKey, accessToken, list, listItemId);
            //Assert.IsInstanceOf<SetResponse> (response, "response is SetResponse");
        }
        
        /// <summary>
        /// Test SetPost
        /// </summary>
        [Test]
        public void SetPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string aPIKey = null;
            //string accessToken = null;
            //string list = null;
            //string listItemId = null;
            //string body = null;
            //var response = instance.SetPost(aPIKey, accessToken, list, listItemId, body);
            //Assert.IsInstanceOf<SetResponse> (response, "response is SetResponse");
        }
        
    }

}
