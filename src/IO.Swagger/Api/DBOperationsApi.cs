/* 
 * Switch Database REST API
 *
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDBOperationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add is used for adding a data object to the list created at Switch DB.
        /// </summary>
        /// <remarks>
        /// You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>AddResponse</returns>
        AddResponse AddPost (string aPIKey, string accessToken, string list, string body);

        /// <summary>
        /// Add is used for adding a data object to the list created at Switch DB.
        /// </summary>
        /// <remarks>
        /// You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>ApiResponse of AddResponse</returns>
        ApiResponse<AddResponse> AddPostWithHttpInfo (string aPIKey, string accessToken, string list, string body);
        /// <summary>
        /// It&#39;s used for listing a data added before.
        /// </summary>
        /// <remarks>
        /// List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your Switch DB Query.</param>
        /// <returns></returns>
        void ListPost (string aPIKey, string accessToken, string list, Body body);

        /// <summary>
        /// It&#39;s used for listing a data added before.
        /// </summary>
        /// <remarks>
        /// List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your Switch DB Query.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ListPostWithHttpInfo (string aPIKey, string accessToken, string list, Body body);
        /// <summary>
        /// It&#39;s used for deleting a data added before at Switch DB.
        /// </summary>
        /// <remarks>
        /// List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <returns>SetResponse</returns>
        SetResponse SetDelete (string aPIKey, string accessToken, string list, string listItemId);

        /// <summary>
        /// It&#39;s used for deleting a data added before at Switch DB.
        /// </summary>
        /// <remarks>
        /// List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <returns>ApiResponse of SetResponse</returns>
        ApiResponse<SetResponse> SetDeleteWithHttpInfo (string aPIKey, string accessToken, string list, string listItemId);
        /// <summary>
        /// It&#39;s used for updating a data object that is already added to Switch DB.
        /// </summary>
        /// <remarks>
        /// In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>SetResponse</returns>
        SetResponse SetPost (string aPIKey, string accessToken, string list, string listItemId, string body);

        /// <summary>
        /// It&#39;s used for updating a data object that is already added to Switch DB.
        /// </summary>
        /// <remarks>
        /// In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>ApiResponse of SetResponse</returns>
        ApiResponse<SetResponse> SetPostWithHttpInfo (string aPIKey, string accessToken, string list, string listItemId, string body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add is used for adding a data object to the list created at Switch DB.
        /// </summary>
        /// <remarks>
        /// You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>Task of AddResponse</returns>
        System.Threading.Tasks.Task<AddResponse> AddPostAsync (string aPIKey, string accessToken, string list, string body);

        /// <summary>
        /// Add is used for adding a data object to the list created at Switch DB.
        /// </summary>
        /// <remarks>
        /// You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>Task of ApiResponse (AddResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddResponse>> AddPostAsyncWithHttpInfo (string aPIKey, string accessToken, string list, string body);
        /// <summary>
        /// It&#39;s used for listing a data added before.
        /// </summary>
        /// <remarks>
        /// List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your Switch DB Query.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ListPostAsync (string aPIKey, string accessToken, string list, Body body);

        /// <summary>
        /// It&#39;s used for listing a data added before.
        /// </summary>
        /// <remarks>
        /// List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your Switch DB Query.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListPostAsyncWithHttpInfo (string aPIKey, string accessToken, string list, Body body);
        /// <summary>
        /// It&#39;s used for deleting a data added before at Switch DB.
        /// </summary>
        /// <remarks>
        /// List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <returns>Task of SetResponse</returns>
        System.Threading.Tasks.Task<SetResponse> SetDeleteAsync (string aPIKey, string accessToken, string list, string listItemId);

        /// <summary>
        /// It&#39;s used for deleting a data added before at Switch DB.
        /// </summary>
        /// <remarks>
        /// List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <returns>Task of ApiResponse (SetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetResponse>> SetDeleteAsyncWithHttpInfo (string aPIKey, string accessToken, string list, string listItemId);
        /// <summary>
        /// It&#39;s used for updating a data object that is already added to Switch DB.
        /// </summary>
        /// <remarks>
        /// In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>Task of SetResponse</returns>
        System.Threading.Tasks.Task<SetResponse> SetPostAsync (string aPIKey, string accessToken, string list, string listItemId, string body);

        /// <summary>
        /// It&#39;s used for updating a data object that is already added to Switch DB.
        /// </summary>
        /// <remarks>
        /// In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>Task of ApiResponse (SetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetResponse>> SetPostAsyncWithHttpInfo (string aPIKey, string accessToken, string list, string listItemId, string body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DBOperationsApi : IDBOperationsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DBOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DBOperationsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DBOperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DBOperationsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add is used for adding a data object to the list created at Switch DB. You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>AddResponse</returns>
        public AddResponse AddPost (string aPIKey, string accessToken, string list, string body)
        {
             ApiResponse<AddResponse> localVarResponse = AddPostWithHttpInfo(aPIKey, accessToken, list, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add is used for adding a data object to the list created at Switch DB. You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>ApiResponse of AddResponse</returns>
        public ApiResponse< AddResponse > AddPostWithHttpInfo (string aPIKey, string accessToken, string list, string body)
        {
            // verify the required parameter 'aPIKey' is set
            if (aPIKey == null)
                throw new ApiException(400, "Missing required parameter 'aPIKey' when calling DBOperationsApi->AddPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling DBOperationsApi->AddPost");
            // verify the required parameter 'list' is set
            if (list == null)
                throw new ApiException(400, "Missing required parameter 'list' when calling DBOperationsApi->AddPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DBOperationsApi->AddPost");

            var localVarPath = "/Add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (aPIKey != null) localVarHeaderParams.Add("APIKey", Configuration.ApiClient.ParameterToString(aPIKey)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("AccessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (list != null) localVarHeaderParams.Add("List", Configuration.ApiClient.ParameterToString(list)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddResponse)));
            
        }

        /// <summary>
        /// Add is used for adding a data object to the list created at Switch DB. You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>Task of AddResponse</returns>
        public async System.Threading.Tasks.Task<AddResponse> AddPostAsync (string aPIKey, string accessToken, string list, string body)
        {
             ApiResponse<AddResponse> localVarResponse = await AddPostAsyncWithHttpInfo(aPIKey, accessToken, list, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add is used for adding a data object to the list created at Switch DB. You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>Task of ApiResponse (AddResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddResponse>> AddPostAsyncWithHttpInfo (string aPIKey, string accessToken, string list, string body)
        {
            // verify the required parameter 'aPIKey' is set
            if (aPIKey == null)
                throw new ApiException(400, "Missing required parameter 'aPIKey' when calling DBOperationsApi->AddPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling DBOperationsApi->AddPost");
            // verify the required parameter 'list' is set
            if (list == null)
                throw new ApiException(400, "Missing required parameter 'list' when calling DBOperationsApi->AddPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DBOperationsApi->AddPost");

            var localVarPath = "/Add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (aPIKey != null) localVarHeaderParams.Add("APIKey", Configuration.ApiClient.ParameterToString(aPIKey)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("AccessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (list != null) localVarHeaderParams.Add("List", Configuration.ApiClient.ParameterToString(list)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddResponse)));
            
        }

        /// <summary>
        /// It&#39;s used for listing a data added before. List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your Switch DB Query.</param>
        /// <returns></returns>
        public void ListPost (string aPIKey, string accessToken, string list, Body body)
        {
             ListPostWithHttpInfo(aPIKey, accessToken, list, body);
        }

        /// <summary>
        /// It&#39;s used for listing a data added before. List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your Switch DB Query.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ListPostWithHttpInfo (string aPIKey, string accessToken, string list, Body body)
        {
            // verify the required parameter 'aPIKey' is set
            if (aPIKey == null)
                throw new ApiException(400, "Missing required parameter 'aPIKey' when calling DBOperationsApi->ListPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling DBOperationsApi->ListPost");
            // verify the required parameter 'list' is set
            if (list == null)
                throw new ApiException(400, "Missing required parameter 'list' when calling DBOperationsApi->ListPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DBOperationsApi->ListPost");

            var localVarPath = "/List";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (aPIKey != null) localVarHeaderParams.Add("APIKey", Configuration.ApiClient.ParameterToString(aPIKey)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("AccessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (list != null) localVarHeaderParams.Add("List", Configuration.ApiClient.ParameterToString(list)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// It&#39;s used for listing a data added before. List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your Switch DB Query.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ListPostAsync (string aPIKey, string accessToken, string list, Body body)
        {
             await ListPostAsyncWithHttpInfo(aPIKey, accessToken, list, body);

        }

        /// <summary>
        /// It&#39;s used for listing a data added before. List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="body">Your Switch DB Query.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListPostAsyncWithHttpInfo (string aPIKey, string accessToken, string list, Body body)
        {
            // verify the required parameter 'aPIKey' is set
            if (aPIKey == null)
                throw new ApiException(400, "Missing required parameter 'aPIKey' when calling DBOperationsApi->ListPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling DBOperationsApi->ListPost");
            // verify the required parameter 'list' is set
            if (list == null)
                throw new ApiException(400, "Missing required parameter 'list' when calling DBOperationsApi->ListPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DBOperationsApi->ListPost");

            var localVarPath = "/List";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (aPIKey != null) localVarHeaderParams.Add("APIKey", Configuration.ApiClient.ParameterToString(aPIKey)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("AccessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (list != null) localVarHeaderParams.Add("List", Configuration.ApiClient.ParameterToString(list)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// It&#39;s used for deleting a data added before at Switch DB. List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <returns>SetResponse</returns>
        public SetResponse SetDelete (string aPIKey, string accessToken, string list, string listItemId)
        {
             ApiResponse<SetResponse> localVarResponse = SetDeleteWithHttpInfo(aPIKey, accessToken, list, listItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// It&#39;s used for deleting a data added before at Switch DB. List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <returns>ApiResponse of SetResponse</returns>
        public ApiResponse< SetResponse > SetDeleteWithHttpInfo (string aPIKey, string accessToken, string list, string listItemId)
        {
            // verify the required parameter 'aPIKey' is set
            if (aPIKey == null)
                throw new ApiException(400, "Missing required parameter 'aPIKey' when calling DBOperationsApi->SetDelete");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling DBOperationsApi->SetDelete");
            // verify the required parameter 'list' is set
            if (list == null)
                throw new ApiException(400, "Missing required parameter 'list' when calling DBOperationsApi->SetDelete");
            // verify the required parameter 'listItemId' is set
            if (listItemId == null)
                throw new ApiException(400, "Missing required parameter 'listItemId' when calling DBOperationsApi->SetDelete");

            var localVarPath = "/Set";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (aPIKey != null) localVarHeaderParams.Add("APIKey", Configuration.ApiClient.ParameterToString(aPIKey)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("AccessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (list != null) localVarHeaderParams.Add("List", Configuration.ApiClient.ParameterToString(list)); // header parameter
            if (listItemId != null) localVarHeaderParams.Add("ListItemId", Configuration.ApiClient.ParameterToString(listItemId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetResponse)));
            
        }

        /// <summary>
        /// It&#39;s used for deleting a data added before at Switch DB. List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <returns>Task of SetResponse</returns>
        public async System.Threading.Tasks.Task<SetResponse> SetDeleteAsync (string aPIKey, string accessToken, string list, string listItemId)
        {
             ApiResponse<SetResponse> localVarResponse = await SetDeleteAsyncWithHttpInfo(aPIKey, accessToken, list, listItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// It&#39;s used for deleting a data added before at Switch DB. List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <returns>Task of ApiResponse (SetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetResponse>> SetDeleteAsyncWithHttpInfo (string aPIKey, string accessToken, string list, string listItemId)
        {
            // verify the required parameter 'aPIKey' is set
            if (aPIKey == null)
                throw new ApiException(400, "Missing required parameter 'aPIKey' when calling DBOperationsApi->SetDelete");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling DBOperationsApi->SetDelete");
            // verify the required parameter 'list' is set
            if (list == null)
                throw new ApiException(400, "Missing required parameter 'list' when calling DBOperationsApi->SetDelete");
            // verify the required parameter 'listItemId' is set
            if (listItemId == null)
                throw new ApiException(400, "Missing required parameter 'listItemId' when calling DBOperationsApi->SetDelete");

            var localVarPath = "/Set";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (aPIKey != null) localVarHeaderParams.Add("APIKey", Configuration.ApiClient.ParameterToString(aPIKey)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("AccessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (list != null) localVarHeaderParams.Add("List", Configuration.ApiClient.ParameterToString(list)); // header parameter
            if (listItemId != null) localVarHeaderParams.Add("ListItemId", Configuration.ApiClient.ParameterToString(listItemId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetResponse)));
            
        }

        /// <summary>
        /// It&#39;s used for updating a data object that is already added to Switch DB. In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>SetResponse</returns>
        public SetResponse SetPost (string aPIKey, string accessToken, string list, string listItemId, string body)
        {
             ApiResponse<SetResponse> localVarResponse = SetPostWithHttpInfo(aPIKey, accessToken, list, listItemId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// It&#39;s used for updating a data object that is already added to Switch DB. In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>ApiResponse of SetResponse</returns>
        public ApiResponse< SetResponse > SetPostWithHttpInfo (string aPIKey, string accessToken, string list, string listItemId, string body)
        {
            // verify the required parameter 'aPIKey' is set
            if (aPIKey == null)
                throw new ApiException(400, "Missing required parameter 'aPIKey' when calling DBOperationsApi->SetPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling DBOperationsApi->SetPost");
            // verify the required parameter 'list' is set
            if (list == null)
                throw new ApiException(400, "Missing required parameter 'list' when calling DBOperationsApi->SetPost");
            // verify the required parameter 'listItemId' is set
            if (listItemId == null)
                throw new ApiException(400, "Missing required parameter 'listItemId' when calling DBOperationsApi->SetPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DBOperationsApi->SetPost");

            var localVarPath = "/Set";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (aPIKey != null) localVarHeaderParams.Add("APIKey", Configuration.ApiClient.ParameterToString(aPIKey)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("AccessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (list != null) localVarHeaderParams.Add("List", Configuration.ApiClient.ParameterToString(list)); // header parameter
            if (listItemId != null) localVarHeaderParams.Add("ListItemId", Configuration.ApiClient.ParameterToString(listItemId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetResponse)));
            
        }

        /// <summary>
        /// It&#39;s used for updating a data object that is already added to Switch DB. In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>Task of SetResponse</returns>
        public async System.Threading.Tasks.Task<SetResponse> SetPostAsync (string aPIKey, string accessToken, string list, string listItemId, string body)
        {
             ApiResponse<SetResponse> localVarResponse = await SetPostAsyncWithHttpInfo(aPIKey, accessToken, list, listItemId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// It&#39;s used for updating a data object that is already added to Switch DB. In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey">Your Switch API Key.</param>
        /// <param name="accessToken">Your Access Token.</param>
        /// <param name="list">Your data list name.</param>
        /// <param name="listItemId">Your list item id.</param>
        /// <param name="body">Your new value JSON.</param>
        /// <returns>Task of ApiResponse (SetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetResponse>> SetPostAsyncWithHttpInfo (string aPIKey, string accessToken, string list, string listItemId, string body)
        {
            // verify the required parameter 'aPIKey' is set
            if (aPIKey == null)
                throw new ApiException(400, "Missing required parameter 'aPIKey' when calling DBOperationsApi->SetPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling DBOperationsApi->SetPost");
            // verify the required parameter 'list' is set
            if (list == null)
                throw new ApiException(400, "Missing required parameter 'list' when calling DBOperationsApi->SetPost");
            // verify the required parameter 'listItemId' is set
            if (listItemId == null)
                throw new ApiException(400, "Missing required parameter 'listItemId' when calling DBOperationsApi->SetPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DBOperationsApi->SetPost");

            var localVarPath = "/Set";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (aPIKey != null) localVarHeaderParams.Add("APIKey", Configuration.ApiClient.ParameterToString(aPIKey)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("AccessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (list != null) localVarHeaderParams.Add("List", Configuration.ApiClient.ParameterToString(list)); // header parameter
            if (listItemId != null) localVarHeaderParams.Add("ListItemId", Configuration.ApiClient.ParameterToString(listItemId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetResponse)));
            
        }

    }
}
